
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\006\000\002\004\003\000\002\004\004" +
    "\000\002\006\005\000\002\005\005\000\002\014\004\000" +
    "\002\007\003\000\002\007\006\000\002\016\002\000\002" +
    "\012\006\000\002\010\010\000\002\010\010\000\002\011" +
    "\003\000\002\011\004\000\002\013\006\000\002\015\003" +
    "\000\002\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\013\011\001\002\000\004\002\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\004\020\013\001\002\000\006\006\ufffd\020\ufffd" +
    "\001\002\000\004\005\062\001\002\000\004\016\052\001" +
    "\002\000\006\006\020\020\013\001\002\000\006\006\ufffc" +
    "\020\ufffc\001\002\000\004\002\ufffe\001\002\000\004\013" +
    "\021\001\002\000\006\007\024\010\022\001\002\000\004" +
    "\013\045\001\002\000\004\017\035\001\002\000\004\013" +
    "\025\001\002\000\004\014\026\001\002\000\004\010\027" +
    "\001\002\000\004\013\030\001\002\000\004\015\031\001" +
    "\002\000\004\017\ufff4\001\002\000\006\002\ufff5\017\035" +
    "\001\002\000\006\002\ufff2\017\ufff2\001\002\000\004\013" +
    "\036\001\002\000\004\013\uffef\001\002\000\004\016\040" +
    "\001\002\000\006\011\042\012\041\001\002\000\006\011" +
    "\uffee\012\uffee\001\002\000\004\016\043\001\002\000\006" +
    "\002\ufff0\017\ufff0\001\002\000\006\011\uffed\012\uffed\001" +
    "\002\000\006\002\ufff1\017\ufff1\001\002\000\004\015\046" +
    "\001\002\000\004\007\047\001\002\000\004\013\050\001" +
    "\002\000\004\014\051\001\002\000\004\017\ufff3\001\002" +
    "\000\004\020\061\001\002\000\006\011\056\012\055\001" +
    "\002\000\006\011\ufff8\012\ufff8\001\002\000\004\016\ufff6" +
    "\001\002\000\006\006\ufffb\020\ufffb\001\002\000\004\016" +
    "\052\001\002\000\006\011\ufff7\012\ufff7\001\002\000\006" +
    "\011\ufff9\012\ufff9\001\002\000\004\013\063\001\002\000" +
    "\004\016\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\006\002\005\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\014\005\013\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\052" +
    "\014\053\001\001\000\010\005\013\006\015\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\022\001\001\000\002\001\001\000\010\011" +
    "\031\013\032\015\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\043\015\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\056" +
    "\001\001\000\002\001\001\000\004\014\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

symbol_table = new Hashtable<String,Integer>();

    }


public Hashtable<String,Integer> symbol_table;

public void report_error(String message, Object info) {
StringBuffer m = new StringBuffer(message);
if (info instanceof Symbol) {
if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
int line = (((Symbol)info).left)+1;
int column = (((Symbol)info).right)+1;
m.append(" (linea "+line+", colonna "+column+")");
}
}
System.err.println(m);
}
}

public Object stack(int position) {
return (((Symbol)stack.elementAt(tos+position)).value);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= prog_ok 
            {
              Object RESULT =null;
		 System.out.print("Syntax Correct\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= error 
            {
              Object RESULT =null;
		
parser.report_error("Error in file\n",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_ok ::= INIZIO PP mp3_list server_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_ok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mp3_list ::= mp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mp3_list ::= mp3_list mp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mp3 ::= dim song_list PV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dim ::= NUMERO KBS PP 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // song ::= CANZONE NUMERO 
            {
              Object RESULT =null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nome = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int durataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int durataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer durata = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Integer rate = (Integer) parser.stack(-2);
parser.symbol_table.put(nome, durata*rate);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("song",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // song_list ::= song 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("song_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // song_list ::= song_list V NT0 song 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("song_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT0 ::= 
            {
              Integer RESULT =null;
		 RESULT = (Integer) parser.stack(-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // server_section ::= SERVER PP data_time user_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("server_section",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_time ::= TIME PP ORA DATA PP DATE 
            {
              Object RESULT =null;
		 System.out.println("OUTPUT:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_time",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_time ::= DATA PP DATE TIME PP ORA 
            {
              Object RESULT =null;
		 System.out.println("OUTPUT:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_time",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // user_list ::= user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // user_list ::= user_list user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // user ::= ip PP lista_canzoni PV 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
System.out.println("TOTALE: " + x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ip ::= IP 
            {
              Object RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_canzoni ::= CANZONE 
            {
              Integer RESULT =null;
		int nome_canzoneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nome_canzoneright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nome_canzone = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Integer length= (Integer)parser.symbol_table.get(nome_canzone);
System.out.println(nome_canzone + " " + length);
RESULT = length;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_canzoni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_canzoni ::= lista_canzoni V CANZONE 
            {
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nome_canzoneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nome_canzoneright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nome_canzone = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Integer length= (Integer)parser.symbol_table.get(nome_canzone);
System.out.println(nome_canzone + " " + length);
RESULT = length + x;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_canzoni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
